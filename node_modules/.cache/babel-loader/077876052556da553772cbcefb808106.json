{"ast":null,"code":"import _classCallCheck from \"/Users/joshualandi/Desktop/scoreboard2/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/joshualandi/Desktop/scoreboard2/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/joshualandi/Desktop/scoreboard2/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/joshualandi/Desktop/scoreboard2/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/joshualandi/Desktop/scoreboard2/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/joshualandi/Desktop/scoreboard2/src/components/Stopwatch.js\";\nimport React, { Component } from 'react';\n\nvar Stopwatch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stopwatch, _Component);\n\n  function Stopwatch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Stopwatch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Stopwatch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    _this.tick = function () {\n      if (_this.state.isRunning) {\n        var now = Date.now();\n\n        _this.setState(function (prevState) {\n          return {\n            previousTime: now,\n            elapsedTime: prevState.elapsedTime + (now - _this.state.previousTime)\n          };\n        });\n      }\n    };\n\n    _this.handleStopwatch = function () {\n      _this.setState(function (prevState) {\n        return {\n          isRunning: !prevState.isRunning\n        };\n      });\n\n      if (!_this.state.isRunning) {\n        _this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n\n    _this.handleReset = function () {\n      _this.setState({\n        elapsedTime: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Stopwatch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.intervalID = setInterval(function () {\n        return _this2.tick();\n      }, 100);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.intervalID);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var seconds = Math.floor(this.state.elapsedTime / 1000);\n      return React.createElement(\"div\", {\n        className: \"stopwatch\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Stopwatch\"), React.createElement(\"span\", {\n        className: \"stopwatch-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, seconds), React.createElement(\"button\", {\n        onClick: this.handleStopwatch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.state.isRunning ? 'Stop' : 'Start'), React.createElement(\"button\", {\n        onClick: this.handleReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Reset\"));\n    }\n  }]);\n\n  return Stopwatch;\n}(Component);\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/joshualandi/Desktop/scoreboard2/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","handleReset","intervalID","setInterval","clearInterval","seconds","Math","floor"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,S;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,WAAW,EAAE,CAFT;AAGJC,MAAAA,YAAY,EAAE;AAHV,K;;UAcRC,I,GAAO,YAAM;AACT,UAAI,MAAKJ,KAAL,CAAWC,SAAf,EAA0B;AACtB,YAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,cAAKE,QAAL,CAAe,UAAAC,SAAS;AAAA,iBAAK;AACzBL,YAAAA,YAAY,EAAEE,GADW;AAEzBH,YAAAA,WAAW,EAAEM,SAAS,CAACN,WAAV,IAAyBG,GAAG,GAAG,MAAKL,KAAL,CAAWG,YAA1C;AAFY,WAAL;AAAA,SAAxB;AAIH;AACJ,K;;UAEDM,e,GAAkB,YAAM;AACpB,YAAKF,QAAL,CAAe,UAAAC,SAAS;AAAA,eAAK;AACzBP,UAAAA,SAAS,EAAE,CAACO,SAAS,CAACP;AADG,SAAL;AAAA,OAAxB;;AAGA,UAAI,CAAC,MAAKD,KAAL,CAAWC,SAAhB,EAA2B;AACvB,cAAKM,QAAL,CAAc;AACVJ,UAAAA,YAAY,EAAEG,IAAI,CAACD,GAAL;AADJ,SAAd;AAGH;AACJ,K;;UAEDK,W,GAAc,YAAM;AAChB,YAAKH,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAE;AAAf,OAAd;AACH,K;;;;;;;wCA/BmB;AAAA;;AAChB,WAAKS,UAAL,GAAkBC,WAAW,CAAC;AAAA,eAAM,MAAI,CAACR,IAAL,EAAN;AAAA,OAAD,EAAoB,GAApB,CAA7B;AACH;;;2CAEsB;AACnBS,MAAAA,aAAa,CAAC,KAAKF,UAAN,CAAb;AACH;;;6BA2BS;AACN,UAAMG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKhB,KAAL,CAAWE,WAAX,GAAyB,IAApC,CAAhB;AACA,aACI;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkCY,OAAlC,CAFJ,EAGI;AAAQ,QAAA,OAAO,EAAE,KAAKL,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKT,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,OADrC,CAHJ,EAMI;AAAQ,QAAA,OAAO,EAAE,KAAKS,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANJ,CADJ;AAUH;;;;EArDmBZ,S;;AAwDxB,eAAeC,SAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Stopwatch extends Component {\n\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0\n    };\n\n    componentDidMount() {\n        this.intervalID = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    tick = () => {\n        if (this.state.isRunning) {\n            const now = Date.now();\n            this.setState( prevState => ({\n                previousTime: now,\n                elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n            }));\n        }\n    };\n\n    handleStopwatch = () => {\n        this.setState( prevState => ({\n            isRunning: !prevState.isRunning\n        }));\n        if (!this.state.isRunning) {\n            this.setState({\n                previousTime: Date.now()\n            })\n        }\n    }\n\n    handleReset = () => {\n        this.setState({ elapsedTime: 0 });\n    }\n\n    render () {\n        const seconds = Math.floor(this.state.elapsedTime / 1000);\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <span className='stopwatch-time'>{seconds}</span>\n                <button onClick={this.handleStopwatch}>\n                    {this.state.isRunning ? 'Stop' : 'Start'}\n                </button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        );\n    }\n}\n\nexport default Stopwatch;"]},"metadata":{},"sourceType":"module"}